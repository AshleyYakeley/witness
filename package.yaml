name: witness
version: "0.7"
author: Ashley Yakeley
copyright: (c) 2017-2024 Ashley Yakeley
license: BSD-2-Clause
license-file: LICENSE
maintainer: <ashley@semantic.org>
homepage: https://github.com/AshleyYakeley/witness
bug-reports: https://github.com/AshleyYakeley/witness/issues
synopsis: values that witness types
description:
    A /witness/ is a value that witnesses some sort of constraint on some list of type variables.
    This library provides support for a wide variety of witness types.
    It also provides classes for /representatives/, which are values that represent types.
category: Data
build-type: Simple

tested-with:
  - "GHC == 9.6.6"
  - "GHC == 9.8.4"
  - "GHC == 9.10.1"

extra-source-files:
  - changelog.md

library:
    source-dirs: src
    language: GHC2021
    default-extensions:
      - AllowAmbiguousTypes
      - Arrows
      - DataKinds
      - DefaultSignatures
      - DerivingStrategies
      - FunctionalDependencies
      - ImplicitParams
      - NoImplicitPrelude
      - LambdaCase
      - OverloadedLabels
      - OverloadedStrings
      - PartialTypeSignatures
      - PatternSynonyms
      - QuantifiedConstraints
      - RecordWildCards
      - RecursiveDo
      - RoleAnnotations
      - NoStarIsType
      - TemplateHaskell
      - TypeAbstractions
      - TypeFamilies
      - TypeFamilyDependencies
      - UndecidableInstances
      - UndecidableSuperClasses
      - ViewPatterns
    ghc-options:
      - -Weverything
      - -Wno-missing-import-lists
      - -Wno-missing-export-lists
      - -Wno-unsafe
      - -Wno-missing-safe-haskell-mode
      - -Wno-missing-kind-signatures
      - -Wno-partial-type-signatures
      - -Wno-monomorphism-restriction
      - -Wno-missing-local-signatures
      - -Wno-partial-fields
      - -Wno-all-missed-specialisations # non-breaking
      - -Wno-missed-specialisations # non-breaking
    dependencies:
      - base >= 4.18 && < 5
      - constraints >= 0.14
      - containers >= 0.6
      - countable >= 1.2
    exposed-modules:
      - Data.Type.Witness.Apply
      - Data.PeanoNat
      - Data.Type.Witness.General.TestHetEquality
      - Data.Type.Witness.General.HetConstraint
      - Data.Type.Witness.Specific.Some
      - Data.Type.Witness.Specific.All
      - Data.Type.Witness.General.AllConstraint
      - Data.Type.Witness.General.WitnessConstraint
      - Data.Type.Witness.General.WitnessValue
      - Data.Type.Witness.General.ListElement
      - Data.Type.Witness.Specific.Symbol
      - Data.Type.Witness.General.Finite
      - Data.Type.Witness.Specific.Single
      - Data.Type.Witness.Specific.Pair
      - Data.Type.Witness.Specific.Empty
      - Data.Type.Witness.Specific.Either
      - Data.Type.Witness.Specific.FiniteAllFor
      - Data.Type.Witness.Specific.WitnessMap.Of
      - Data.Type.Witness.Specific.WitnessMap.For
      - Data.Type.Witness.Specific.OrderedWitnessMap.Of
      - Data.Type.Witness.Specific.OrderedWitnessMap.For
      - Data.Type.Witness.Specific.PeanoNat
      - Data.Type.Witness.Specific.Natural
      - Data.Type.Witness.Specific.FixedList
      - Data.Type.Witness.Specific.List.Element
      - Data.Type.Witness.Specific.List.List
      - Data.Type.Witness.Specific.Concat
      - Data.Type.Witness.Specific.ApplyStack
      - Data.Type.Witness.Specific.List.Product
      - Data.Type.Witness.Specific.List.Sum
      - Data.Type.Witness.General.Representative
      - Data.Type.Witness.General.Order
      - Data.Type.Witness
    other-modules:
      - Import
